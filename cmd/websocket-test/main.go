package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/gorilla/websocket"
)

// SubscriptionMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ WebSocket –∫–∞–Ω–∞–ª—ã MEXC
type SubscriptionMessage struct {
	Method string   `json:"method"`
	Params []string `json:"params"`
	ID     int      `json:"id"`
}

// KlineData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
type KlineData struct {
	Channel string `json:"channel"`
	Symbol  string `json:"symbol"`
	Data    struct {
		OpenTime  int64   `json:"t"`
		Open      float64 `json:"o"`
		High      float64 `json:"h"`
		Low       float64 `json:"l"`
		Close     float64 `json:"c"`
		Volume    float64 `json:"q"`
		TradeTime int64   `json:"T"`
	} `json:"data"`
}

// WebSocketMessage –æ–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
type WebSocketMessage struct {
	ID     int         `json:"id"`
	Result interface{} `json:"result"`
	Method string      `json:"method"`
	Params interface{} `json:"params"`
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è MEXC Klines...")
	fmt.Println("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –ø–∞—Ä—ã DOLZ_USDT")
	fmt.Println("üî¨ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ WebSocket!")
	fmt.Println("")

	// URL WebSocket —Å–µ—Ä–≤–µ—Ä–∞ MEXC
	url := "wss://wbs-api.mexc.com/ws"

	fmt.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s...\n", url)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
	conn, _, err := websocket.DefaultDialer.Dial(url, nil)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WebSocket: %v", err)
	}
	defer conn.Close()

	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É MEXC")

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –ø–∞—Ä—ã DOLZ_USDT
	subscription := SubscriptionMessage{
		Method: "SUBSCRIPTION",
		Params: []string{"spot@public.kline.v3.api@Min5@DOLZUSDT"},
		ID:     1,
	}

	fmt.Printf("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É: %+v\n", subscription)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
	if err := conn.WriteJSON(subscription); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
	}

	fmt.Println("üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ 5-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –ø–∞—Ä—ã DOLZ_USDT")
	fmt.Println("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
	fmt.Println(strings.Repeat("=", 60))

	// –ß–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
	messageCount := 0
	timeout := time.After(30 * time.Second) // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥

	for {
		select {
		case <-timeout:
			fmt.Println("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (30 —Å–µ–∫—É–Ω–¥)")
			fmt.Println("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
			fmt.Println("   - –ü–∞—Ä–∞ DOLZ_USDT –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
			fmt.Println("   - –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã")
			fmt.Println("   - –ü–∞—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ –∏ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤")
			fmt.Println("")
			fmt.Println("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
			fmt.Println("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—ã –Ω–∞ —Å–∞–π—Ç–µ MEXC")
			fmt.Println("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø–æ–ø—É–ª—è—Ä–Ω—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)")
			fmt.Println("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º")
			return
		default:
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
			conn.SetReadDeadline(time.Now().Add(5 * time.Second))

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º recover –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–Ω–∏–∫–∏
			func() {
				defer func() {
					if r := recover(); r != nil {
						fmt.Printf("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: %v\n", r)
						fmt.Println("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä")
						return
					}
				}()

				messageType, messageBytes, err := conn.ReadMessage()
				if err != nil {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
					if websocket.IsCloseError(err, websocket.CloseNormalClosure, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
						fmt.Println("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
						fmt.Println("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–∞—Ä")
						return
					}
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
					if strings.Contains(err.Error(), "websocket: close") {
						fmt.Printf("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: %v\n", err)
						return
					}
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ EOF –æ—à–∏–±–∫–∏
					if strings.Contains(err.Error(), "EOF") {
						fmt.Println("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (EOF)")
						return
					}
					// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
					return
				}

				messageCount++
				fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #%d (—Ç–∏–ø: %d, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç)\n", messageType, messageCount, len(messageBytes))

				// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
				switch messageType {
				case websocket.TextMessage:
					handleTextMessage(messageBytes, messageCount)
				case websocket.BinaryMessage:
					handleBinaryMessage(messageBytes, messageCount)
				default:
					fmt.Printf("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: %d\n", messageType)
				}

				// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
				if messageCount >= 10 {
					fmt.Println("üõë –ü–æ–ª—É—á–µ–Ω–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
					return
				}
			}()
		}
	}
}

// handleTextMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (JSON)
func handleTextMessage(messageBytes []byte, messageNum int) {
	fmt.Printf("üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #%d:\n", messageNum)

	// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏)
	var wsMsg WebSocketMessage
	if err := json.Unmarshal(messageBytes, &wsMsg); err == nil {
		if wsMsg.ID == 1 {
			fmt.Printf("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: %+v\n", wsMsg.Result)
			return
		}
		fmt.Printf("üìã WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: %+v\n", wsMsg)
		return
	}

	// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
	var klineData KlineData
	if err := json.Unmarshal(messageBytes, &klineData); err == nil {
		if klineData.Channel != "" {
			printKlineData(klineData, messageNum)
			return
		}
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤—ã–≤–æ–¥–∏–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
	fmt.Printf("üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: %s\n", string(messageBytes))
	fmt.Println(strings.Repeat("-", 40))
}

// handleBinaryMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (protobuf)
func handleBinaryMessage(messageBytes []byte, messageNum int) {
	fmt.Printf("üî¢ –ë–∏–Ω–∞—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #%d (protobuf):\n", messageNum)
	fmt.Printf("   –†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", len(messageBytes))

	// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ protobuf (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π protobuf –ø–∞—Ä—Å–∏–Ω–≥
	fmt.Printf("üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ protobuf –¥–∞–Ω–Ω—ã—Ö...\n")

	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if len(messageBytes) > 0 {
		fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω—ã –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç MEXC WebSocket\n")
		fmt.Printf("üí° –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å protobuf –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ DOLZ_USDT\n")
		fmt.Printf("üîß –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ .proto —Ñ–∞–π–ª—ã –æ—Ç MEXC\n")
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å protobuf, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º hex –¥–∞–º–ø
	fmt.Printf("üìä Hex –¥–∞–º–ø (–ø–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç):\n")
	limit := len(messageBytes)
	if limit > 100 {
		limit = 100
	}
	for i := 0; i < limit; i += 16 {
		end := i + 16
		if end > limit {
			end = limit
		}
		fmt.Printf("   %04x: %x\n", i, messageBytes[i:end])
	}
	fmt.Println(strings.Repeat("-", 40))
}

// printKlineData –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –≤ –∫–æ–Ω—Å–æ–ª—å (JSON —Ñ–æ—Ä–º–∞—Ç)
func printKlineData(kline KlineData, messageNum int) {
	fmt.Printf("üìà –°–≤–µ—á–∞ #%d –¥–ª—è %s (JSON):\n", messageNum, kline.Symbol)
	fmt.Printf("   üïê –í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: %s\n", time.Unix(kline.Data.OpenTime/1000, 0).Format("2006-01-02 15:04:05"))
	fmt.Printf("   üìä –û—Ç–∫—Ä—ã—Ç–∏–µ: %.6f\n", kline.Data.Open)
	fmt.Printf("   üî∫ –ú–∞–∫—Å–∏–º—É–º: %.6f\n", kline.Data.High)
	fmt.Printf("   üîª –ú–∏–Ω–∏–º—É–º: %.6f\n", kline.Data.Low)
	fmt.Printf("   üìä –ó–∞–∫—Ä—ã—Ç–∏–µ: %.6f\n", kline.Data.Close)
	fmt.Printf("   üì¶ –û–±—ä–µ–º: %.2f\n", kline.Data.Volume)
	fmt.Printf("   üïê –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: %s\n", time.Unix(kline.Data.TradeTime/1000, 0).Format("2006-01-02 15:04:05"))
	fmt.Println(strings.Repeat("=", 60))
}

// init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func init() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if os.Getenv("MEXC_API_KEY") == "" {
		fmt.Println("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: MEXC_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}
	if os.Getenv("MEXC_SECRET") == "" {
		fmt.Println("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: MEXC_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}
}
